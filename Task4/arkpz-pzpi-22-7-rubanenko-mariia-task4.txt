Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №4
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Розробка IоT клієнта 
(бізнес-логіки та функцій налаштування)»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-7 							доц. Сокорчук І. П.
Рубаненко М. С.




2024 рік
РОЗРОБКА IОT КЛІЄНТА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ
1.1	Мета роботи


Розробити програмне забезпечення для IoT-клієнта, яке забезпечує взаємодію пристрою з програмною системою через сучасні протоколи обміну даними, реалізовує бізнес-логіку моніторингу та управління, а також відповідає концепції "розумних пристроїв". Створити інтерфейс для управління IoT-пристроєм, забезпечити обробку даних, що генеруються пристроєм, і передачу цих даних на серверну частину системи для подальшого аналізу та зберігання.

1.2	Опис бізнес логіки IoT клієнта


Діаграма демонструє процес роботи інтегрованої системи для IoT клієнта, яка забезпечує контроль за зберіганням та транспортуванням крові. Коли лікарня подає заявку на доставку крові, банк крові реєструє замовлення та працівник заповнює спеціальний бланк, у якому зазначає деталі транспортування. Відповідно до замовлення призначається транспортувальник, який отримує повідомлення про необхідність виконання доставки.
Транспортувальник, отримавши сповіщення, переходить до роботи із замовленням. Спеціально для транспортування крові в банках використовуються холодильники з трьома окремими відділами. Кожен з них може підтримувати незалежну температуру, що необхідно для транспортування трьох основних компонентів крові: плазми, тромбоцитів та еритроцитів (Plasma, Platelets, Red Blood Cells). Транспортувальник вмикає необхідну кількість відділів холодильника залежно від замовлення та обирає на панелі управління відповідний компонент крові. Система автоматично налаштовує оптимальну температуру для кожного відділу, виходячи з вибраного компонента.
Протягом транспортування холодильник постійно стежить за умовами зберігання крові. Датчики у холодильнику перевіряють температуру кожні три секунди та аналізують отримані дані. Якщо температура перебуває у межах норми, статус виставляється як normal. У разі виявлення відхилень фіксується статус critical low або critical high. Дані про стан умов зберігання регулярно передаються на сервер, що забезпечує можливість віддаленого контролю за транспортуванням. У разі фіксації критичного статусу система автоматично надсилає сповіщення транспортувальнику, який може оперативно відреагувати та виправити ситуацію.
Після успішного завершення доставки транспортувальник підтверджує виконання замовлення. У разі виникнення проблем зі зберіганням чи транспортуванням, система передбачає надсилання критичних повідомлень постачальнику для прийняття необхідних заходів. Завдяки такій автоматизованій системі забезпечується не лише надійність транспортування, а й гарантія безпеки крові на всіх етапах доставки. Ця система дозволяє уникнути псування крові через порушення температурного режиму та забезпечує збереження її життєво важливих властивостей до моменту передачі лікарні.



Рисунок 1.1 – UML Діаграма прецедентів IoT клієнта


1.3	Процеси та взаємодії в системі IoT клієнта


Діаграма ілюструє автоматизований процес доставки крові за допомогою IoT клієнта. Початком є отримання повідомлення про необхідність доставки крові. Після цього транспортувальник отримує підготовлені до транспортування компоненти крові, обирає відповідний холодильник і переглядає інформацію про лікарню та обсяг поставки. Потім визначаються налаштування холодильника: вмикаються потрібні відділи, зайві вимикаються, а для кожного активного відділу вказується тип крові, яку він міститиме. Холодильник автоматично налаштовує необхідну температуру залежно від типу компоненту крові.
Далі здійснюється складання крові у відповідні відділи холодильника, після чого активується функція моніторингу умов зберігання. Під час транспортування IoT система постійно відстежує параметри зберігання крові та передає дані на сервер. У разі виявлення порушень умов зберігання надсилаються критичні повідомлення транспортувальнику, який має оперативно вжити відповідних заходів. Завершенням процесу є передача крові до лікарні, вимикання моніторингу та підтвердження успішного завершення поставки.

Рисунок 1.2 – UML -діаграма діяльності IoT клієнта



1.4	Розробка функцій управління та  інтерфейсу користувача IoT


Розроблене програмне забезпечення реалізує як бізнес-логіку, так і функції налаштування IoT-пристрою на базі сучасних технологій. Програма створює симуляцію роботи розумного холодильника для транспортування крові, який є частиною IoT-системи, забезпечує інтеграцію через API з бекендом, використовує багатопотоковість для паралельного моніторингу кількох відділів, і забезпечує автоматизовану обробку даних у реальному часі. Такий підхід відповідає концепції IoT, оскільки пристрій виконує розширену функціональність, інтегрується з іншими частинами системи та реалізує сучасні протоколи взаємодії.
Для моделювання холодильника було обрано концепцію пристрою з трьома незалежними відділами, кожен з яких може бути налаштований окремо відповідно до потреб користувача. Кожен відділ призначений для зберігання одного з компонентів крові: плазми, тромбоцитів або еритроцитів. Ці компоненти мають специфічні умови зберігання, тому вибір компонента автоматично налаштовує систему на контроль температури в межах відповідного діапазону. Таким чином, програмне забезпечення не лише забезпечує зберігання, але й гарантує відповідність умовам транспортування медичних матеріалів.
Графічний інтерфейс, реалізований за допомогою бібліотеки Tkinter, надає користувачеві простий і зрозумілий спосіб взаємодії з пристроєм.
 Панель управління дозволяє активувати необхідні відділи холодильника, обирати компоненти крові для кожного з них, а також налаштовувати параметри моніторингу рис 1.3-1.5. Візуальні індикатори, такі як зелена лампочка для активних відділів, забезпечують користувача необхідним зворотним зв’язком.


Рисунок 1.3 – Графічний інтерфейс панелі налаштування

Рисунок 1.4 – Графічний інтерфейс панелі управління відділами холодильника

Рисунок 1.5 – Графічний інтерфейс панелі управління з ввімкнутими відділами

Після запуску системи моніторинг температури кожного відділу відбувається автоматично, що звільняє користувача від постійного контролю.
Для моделювання зміни температури в кожному з відділів реалізовано функцію генерації випадкових значень. 

1    def generate_temperature(temp_min, temp_max, anomaly_chance=0):
2        normal_range = (temp_max - temp_min)
3        new_temp_min = temp_min - normal_range / 2
4        new_temp_max = temp_max + normal_range / 2
5        if anomaly_chance > 0 and random.randint(1, 100) <= anomaly_chance:
6            return round(random.uniform(new_temp_min, new_temp_max), 2)
7        return round(random.uniform(temp_min, temp_max), 2)

	Ця функція дозволяє симулювати як нормальні, так і аномальні умови зберігання. Зокрема, користувач може вказати шанс генерації температури, що виходить за межі допустимих значень, що імітує непередбачувані ситуації. 
	Формула, яка використовується у функції generate_temperature, залежить від того, чи буде згенерована нормальна температура, чи аномальна, залежно від заданого шансу аномалії.
Для нормальної температури коли аномалія не виникає генерація відбувається у межах допустимого діапазону температури 
 
Для аномальної температури (з урахуванням шансу аномалії) межі розширюються таким чином 
 
Аномальна температура генерується у розширеному діапазоні 

Результуюча температура вибір між нормальним і аномальним значенням температури залежить від параметра anomaly_chance
 
	Система аналізує отримані значення температури та визначає статус для кожного відділу: "normal", "critical low" або "critical high". Усі ці дані передаються на бекенд через API рис.1.5, де зберігаються для подальшої обробки або аналізу.

Рисунок 1.5 – Вивід даних надісланих на бекенд 

Особливою перевагою розробленої системи є використання багатопотоковості. Кожен відділ холодильника моніториться окремим потоком, що забезпечує паралельну обробку даних та підвищує продуктивність системи. Такий підхід дозволяє ефективно керувати ресурсами та забезпечує стабільну роботу навіть за високого навантаження. Це є ключовим аспектом для IoT-пристроїв, які часто працюють у режимі реального часу.
Таким чином, розроблена система моделює всі основні функції IoT-пристрою, забезпечує автоматизовану обробку даних, інтеграцію з іншими елементами системи, дотримується сучасних вимог до протоколів взаємодії.
Для взаємодії IoT-клієнта та бекенду обрано протокол HTTP, оскільки він є широко використовуваним стандартом у веб-розробці, що забезпечує простоту інтеграції та підтримку. HTTP добре підходить для обміну даними між IoT-пристроями та сервером завдяки своїй сумісності з RESTful API, які є популярним підходом до побудови сучасних систем.
HTTP має кілька ключових переваг у цьому контексті. По-перше, його простота дозволяє швидко налаштувати комунікацію між IoT-клієнтом та бекендом без необхідності складної конфігурації. По-друге, підтримка текстових і бінарних форматів передачі даних (наприклад, JSON) робить його універсальним для обміну структурованою інформацією. По-третє, HTTP забезпечує підтримку шифрування даних через HTTPS, що критично важливо для забезпечення безпеки даних, особливо коли йдеться про медичні пристрої.
Також важливо, що більшість сучасних IoT-платформ, бібліотек і інструментів розробки, таких як Python з бібліотекою requests, мають вбудовану підтримку HTTP. Це спрощує реалізацію клієнтської частини, що дозволяє зосередитися на бізнес-логіці пристрою замість розробки спеціалізованих протоколів. 


1.5	Висновки


У межах проєкту було розроблено програмне забезпечення для IoT-клієнта, яке автоматизує контроль за умовами зберігання та транспортування крові. Реалізовано інтерфейс управління холодильником із трьома незалежними відділами, кожен із яких підтримує оптимальну температуру для плазми, тромбоцитів і еритроцитів.
Система забезпечує моніторинг температури у режимі реального часу, автоматично сповіщає транспортувальника про критичні відхилення й передає дані на сервер для аналізу. Завдяки цьому забезпечується безпечне транспортування крові, мінімізуються ризики її псування й гарантується відповідність умов зберігання медичним стандартам.


Посилання на відео:
https://youtu.be/c0HKylR3Y7k

Посилання на GitHub
https://github.com/NureRubanenkoMariia/arkpz-pzpi-22-7-rubanenko-mariia/tree/main/Task4





